<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js框架和库的区别</title>
      <link href="2020/11/16/js%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%93%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>2020/11/16/js%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%93%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="js框架和库的区别"><a href="#js框架和库的区别" class="headerlink" title="js框架和库的区别"></a>js框架和库的区别</h1><p><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=3425107459,2578638701&fm=26&gp=0.jpg"></p><h2 id="框架和类库最重要的区别是控制权的反转。"><a href="#框架和类库最重要的区别是控制权的反转。" class="headerlink" title="框架和类库最重要的区别是控制权的反转。"></a>框架和类库最重要的区别是控制权的反转。</h2><p>框架就像一个模具,控制权在模具。但是类库就不一样了，控制权在你手中，想实现什么功能就实现什么功能，类库只是帮你封装好了大量实用的函数，帮助你实现自己的目的，你要做的只是根据自己的需要合适地调用这些函数。<br>框架则是为解决一个(一类)问题而开发的产品，框架用户一般只需要使用框架提供的类或函数，即可实现全部功能。可以说，框架是库的升级版。<br>框架和库的比较可以想像为:<br>假如我们要买一台电脑。框架为我们提供了已经装好的电脑，我们只要买回来就能用，但你必须把整个电脑买回来。这样用户自然轻松许多，但会导致<br>很多人用一样的电脑，或你想自定义某个部件将需要修改这个框架。而库就如自己组装的电脑。库为我们提供了很多部件，我们需要自己组装，如果某个部件<br>库未提供，我们也可以自己做。库的使用非常灵活，但没有框架方便。</p><h2 id="npm能解决Node-JS代码部署上的很多问题"><a href="#npm能解决Node-JS代码部署上的很多问题" class="headerlink" title="npm能解决Node.JS代码部署上的很多问题"></a>npm能解决Node.JS代码部署上的很多问题</h2><h2 id="tupian1"><a href="#tupian1" class="headerlink" title="tupian1"></a>tupian1</h2><p><img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=2616039087,245490236&fm=26&gp=0.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> sss </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小螃蟹的日记@博客---测试版9号</title>
      <link href="2020/10/16/%E5%B0%8F%E8%9E%83%E8%9F%B9%E7%9A%84%E6%97%A5%E8%AE%B0-%E5%8D%9A%E5%AE%A2-%E6%B5%8B%E8%AF%95%E7%89%889%E5%8F%B7/"/>
      <url>2020/10/16/%E5%B0%8F%E8%9E%83%E8%9F%B9%E7%9A%84%E6%97%A5%E8%AE%B0-%E5%8D%9A%E5%AE%A2-%E6%B5%8B%E8%AF%95%E7%89%889%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="网站搭建"><a href="#网站搭建" class="headerlink" title="网站搭建"></a>网站搭建</h1><ul><li><p>VS code</p><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><pre class=" language-yml"><code class="language-yml">$ hexo new "123My New Post"</code></pre><pre class=" language-yml"><code class="language-yml">$ hexo generate</code></pre></li><li><p>在 Build 2015 大会上，微软除了发布了 Microsoft Edge 浏览器和新的 Windows 10 系统外，最大的惊喜莫过于宣布推出免费跨平台的 Visual Studio Code 编辑器了！</p></li><li><p>Learning with VS Code on Chromebooks<br>December 3, 2020 by Alessandro Segala, @ItalyPaleAle</p></li></ul><p>For the last few years, Chromebooks running Google Chrome OS have been providing an alternative to “traditional” laptops. Thanks to lots of choices, from very affordable models to high-end ones, Chromebooks are especially popular among students, who can use them for learning, completing assignments, and attending classes virtually.</p><p>While Chromebooks and Chrome OS are typically centered around the web browser, you can also enable a Linux environment that allows installing native desktop applications, including Visual Studio Code!</p><p>With VS Code running on your Chromebook, you can start coding easily and quickly in a variety of languages and frameworks. This includes languages such as Python, JavaScript and Node.js, Java, and C#, among many more!</p><p>In this article, the first of two, we’ll look at how to install Visual Studio Code on a Chromebook and how to set up an environment to start coding in Python or JavaScript/Node.js. In a later post, we’ll also look at how to leverage the Remote Development extensions for VS Code to connect to more powerful development environments.</p><ul><li>What you’ll need#<br>VS Code runs on any recent Chromebook, as long as you are able to enable Linux applications via Crostini, which we’ll look at how to do in just a moment.</li></ul><p>Visual Studio Code is a lightweight editor, so you will be able to run it on low-powered Chromebooks, with a minimum of 1 GB of RAM. In addition, VS Code is now available for Linux on ARMv7 and ARM64, which means that you can run it on Chromebooks powered by an ARM chip as well!</p><p>For this tutorial, I’ll be using an entry-level Chromebook, with an ARM64 CPU, 4 GB of RAM, and a 32 GB-disk. Despite the modest specs, VS Code runs just fine on this machine!</p><ul><li>Enable Linux on your Chromebook#<br>Before we can install VS Code on Chrome OS, we need to enable support for native Linux apps, using Crostini.</li></ul><p>First, open your system’s Settings, then look for Linux (Beta) on the sidebar. From there, turn on Linux support.</p><h2 id="后台管理系统"><a href="#后台管理系统" class="headerlink" title="后台管理系统"></a>后台管理系统</h2><p><a href="http://ioovl.gitee.io/dist/">若依</a></p>]]></content>
      
      
      <categories>
          
          <category> 测试asd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>100vl</title>
      <link href="2020/10/14/100vl/"/>
      <url>2020/10/14/100vl/</url>
      
        <content type="html"><![CDATA[<h1 id="开源Nei"><a href="#开源Nei" class="headerlink" title="开源Nei"></a>开源Nei</h1><p>部署方式<br>部署方式一：Docker 部署<br>因为有服务依赖，所以需要做容器编排，如果你使用的是 docker-compose，可以直接通过 docker-compose up -d 部署，默认服务运行在本地 8082 端口，你也可以加入 Caddy 或者 Nginx 编排用于实际生产环境。</p><p>部署方式二：普通部署<br>安装服务器软件<br>Node.js &gt;=6.9.2。<br>如果安装完 Node.js 后，没有自动安装 NPM，则需要手动安装。</p><p>Redis &gt;=2.8。<br>MySQL &gt;=5.7.12，初始化脚本为 install.sql。<br>MongoDB &gt;=3.4。<br>安装依赖和构建代码<br>在项目根目录依次执行下述命令，并确保没有错误发生：</p><p>npm install nej -g<br>npm install<br>npm run build<br>上述过程一般都是自动化执行的，请结合你们公司的部署平台编写自动化脚本。</p><p>注意，npm install 的速度可能比较慢，可以使用淘宝源，比如 npm install –registry=<a href="https://registry.npm.taobao.org./">https://registry.npm.taobao.org。</a></p><p>启动应用<br>部署前，请确认应用的配置是否都填写正确，比如数据库的连接配置等。配置文件都放在 server/config 目录下面，其中 develop.js、test.js和online.js 分别为本地环境、测试环境、线上环境的配置文件。配置文件中的参数含义应该比较清晰直白，这里就不再展开介绍。然后，运行下述命令可启动应用：</p><p> npm start<br>默认情况下，应用会运行在 8082 端口上，所以如果想将应用绑定到特定域名，一般需要 Nginx 服务器，参考配置。</p><p>停止应用<br> npm stop<br>注意事项<br>NEI 没有提供恢复已被删资源的功能，根据实际经验，会存在不小心删除接口、数据模型等情形，一旦发生损失就会很严重。建议给重要的数据库表（比如 interface、datatype、parameter等）添加删除操作的触发器，将删除的数据写入备份数据库，保证在误删除操作时可以找回数据。<br>为了安全，请给所有可以设置密码的软件添加密码，比如 Redis 等。<br>考虑到研发成本，NEI 只兼容 Chrome 浏览器。<br>由于打包工具的限制，NEI 的前端 JavaScript 不支持绝大多数的 ES6 语法，不然会构建失败。<br>部署时很有可能会遇到各种各样的环境问题，最好是让专业的运维人员来操作。<br>如果是可以复现的问题，很可能会被很多人遇到，所以优先推荐在 issues 中进行搜索是否有相同问题。<br>本地开发<br>NEI 的前端使用的是 NEJ 和 Regularjs，后端使用的是 Koa 框架。如果想对项目进行改造，需要学习上述技术。</p><p>首次运行需要先安装依赖：</p><p>npm install<br>运行下面的命令可以启动本地开发：</p><p>npm run dev<br><img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=2616039087,245490236&fm=26&gp=0.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 默认分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2019/03/07/hello-world/"/>
      <url>2019/03/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> sss </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tag1 </tag>
            
            <tag> tag2 </tag>
            
            <tag> tag3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文章名称</title>
      <link href="2013/12/02/test/"/>
      <url>2013/12/02/test/</url>
      
        <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>在开始教程之前，你可以了解一下使用gitee pages服务搭建博客有哪些好处：  </p><ul><li>gitee 是国内的网站，相较于 github 访问速度更快；</li><li>全是静态文件，访问速度快；</li><li>免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；<a id="more"></a></li><li>数据绝对安全，基于gitee的版本管理，想恢复到哪个历史版本都行；</li><li>博客内容可以轻松打包、转移、发布到其它平台；</li><li>等等。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 默认分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tag1 </tag>
            
            <tag> tag2 </tag>
            
            <tag> tag3 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
